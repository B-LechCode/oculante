name: Rust Release

on:
  push:
    tags:
      - "*"

env:
  CARGO_TERM_COLOR: always
  MACOS_DEPLOYMENT_TARGET: 10.15

jobs:
  release_job:
    name: Create release
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true

  build_job:
    name: Build release
    needs: release_job
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macOS-latest, ubuntu-latest, windows-latest]
        rust: [stable]
    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/setup-nasm@v1

    - name: Install cargo bundle
      run: cargo install cargo-bundle
      if: matrix.os == 'macOS-latest'

    - name: Patch azure linux deps
      run: sudo apt update
      if: matrix.os == 'ubuntu-20.04'

    - name: Patch azure linux deps
      run: sudo apt update
      if: matrix.os == 'ubuntu-latest'

    - name: Install linux latest dependencies
      run: sudo apt-get install libxcb-shape0-dev libxcb-xfixes0-dev libgtk-3-dev libasound2-dev nasm meson ninja-build libdav1d-dev dav1d
      if: matrix.os == 'ubuntu-latest'

    - name: Install linux classic dependencies
      run: sudo apt-get install libxcb-shape0-dev libxcb-xfixes0-dev libgtk-3-dev libasound2-dev nasm
      if: matrix.os == 'ubuntu-20.04'

    - name: Install osx dependencies
      run: brew install nasm meson ninja
      if: matrix.os == 'macos-latest'

    # - name: Install win ninja
    #   run: choco install ninja
    #   if: matrix.os == 'windows-2019'

    # - name: Install win meson
    #   run: python -m pip install meson
    #   if: matrix.os == 'windows-2019'

    - name: Install win ninja
      run: choco install ninja
      if: matrix.os == 'windows-latest'

    - name: Install win meson
      run: python -m pip install meson
      if: matrix.os == 'windows-latest'

    - name: Build Windows Application
      run: cargo build --release
      if: matrix.os == 'windows-latest'

    # - name: Build Windows classic Application
    #   run: cargo build --release --no-default-features
    #   if: matrix.os == 'windows-2019'

    - name: Build Linux latest Application
      run: cargo build --release
      if: matrix.os == 'ubuntu-latest'

    - name: Build Linux classic Application
      run: cargo build --no-default-features --release
      if: matrix.os == 'ubuntu-20.04'

    - name: Build Mac Bundle
      run: ./build_mac.sh
      if: matrix.os == 'macOS-latest'

    - name: Zip Mac Bundle
      run: mv target/release/bundle/osx/oculante.app . && zip -r oculante_app.zip oculante.app
      if: matrix.os == 'macOS-latest'

    - name: Upload Linux classic Release
      if: matrix.os == 'ubuntu-20.04'
      id: upload-release-asset-lin-classic
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release_job.outputs.upload_url }}
        asset_path: target/release/oculante
        asset_name: oculante_linux_legacy
        asset_content_type: application/zip

    - name: Upload Linux latest Release
      if: matrix.os == 'ubuntu-latest'
      id: upload-release-asset-lin 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release_job.outputs.upload_url }}
        asset_path: target/release/oculante
        asset_name: oculante_linux
        asset_content_type: application/zip

    - name: Upload Mac Release
      if: matrix.os == 'macOS-latest'
      id: upload-release-asset-mac
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release_job.outputs.upload_url }}
        asset_path: oculante_app.zip
        asset_name: oculante_mac.zip
        asset_content_type: application/zip

    - name: Upload Mac Binary
      if: matrix.os == 'macOS-latest'
      id: upload-release-asset-bin
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release_job.outputs.upload_url }}
        asset_path: target/release/oculante
        asset_name: oculante_mac
        asset_content_type: application/zip

    - name: Upload Windows Release
      if: matrix.os == 'windows-latest'
      id: upload-release-asset-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release_job.outputs.upload_url }}
        asset_path: target/release/oculante.exe
        asset_name: oculante.exe
        asset_content_type: application/zip

    # - name: Upload Windows classic Release
    #   if: matrix.os == 'windows-2019'
    #   id: upload-release-asset-windows-classic
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ needs.release_job.outputs.upload_url }}
    #     asset_path: target/release/oculante.exe
    #     asset_name: oculante_legacy.exe
    #     asset_content_type: application/zip

  publish_release:
    name: Publish release
    needs: [build_job, release_job]
    runs-on: ubuntu-20.04
    steps:
    - name: Test id
      run: echo "${{ needs.release_job.outputs.release_id }}"
    - name: Test id 2
      run: echo "${{ needs.release_job.outputs.upload_url }}"
    - name: Publish
      uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ needs.release_job.outputs.release_id }}
